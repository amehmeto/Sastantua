document.querySelector('mutation-test-report-app').report = {"files":{"/Users/amehmeto/Development/Sastantua/src/Sastantua.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":33,"line":2},"start":{"column":29,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1","location":{"end":{"column":34,"line":3},"start":{"column":31,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":36,"line":4},"start":{"column":32,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":29,"line":6},"start":{"column":26,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":29,"line":5},"start":{"column":26,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"7","location":{"end":{"column":3,"line":14},"start":{"column":36,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"8","location":{"end":{"column":31,"line":13},"start":{"column":30,"line":13}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"9","location":{"end":{"column":3,"line":25},"start":{"column":53,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"5","location":{"end":{"column":28,"line":7},"start":{"column":25,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"6","location":{"end":{"column":27,"line":9},"start":{"column":25,"line":9}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"10","location":{"end":{"column":48,"line":19},"start":{"column":24,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"11","location":{"end":{"column":32,"line":19},"start":{"column":30,"line":19}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"12","location":{"end":{"column":32,"line":19},"start":{"column":30,"line":19}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"13","location":{"end":{"column":46,"line":19},"start":{"column":45,"line":19}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"14","location":{"end":{"column":58,"line":19},"start":{"column":51,"line":19}},"mutatorName":"UpdateOperator","replacement":"floor--","status":"Killed"},{"id":"15","location":{"end":{"column":4,"line":23},"start":{"column":60,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":73,"line":20},"start":{"column":61,"line":20}},"mutatorName":"UpdateOperator","replacement":"lineNumber++","status":"Survived"},{"id":"19","location":{"end":{"column":31,"line":24},"start":{"column":10,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"20","location":{"end":{"column":3,"line":35},"start":{"column":94,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"17","location":{"end":{"column":23,"line":22},"start":{"column":4,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"18","location":{"end":{"column":23,"line":22},"start":{"column":4,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"21","location":{"end":{"column":72,"line":29},"start":{"column":60,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":33},"start":{"column":91,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"24","location":{"end":{"column":40,"line":31},"start":{"column":28,"line":31}},"mutatorName":"UpdateOperator","replacement":"lineNumber--","status":"Killed"},{"id":"25","location":{"end":{"column":61,"line":32},"start":{"column":4,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"27","location":{"end":{"column":31,"line":34},"start":{"column":10,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"28","location":{"end":{"column":3,"line":41},"start":{"column":45,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"26","location":{"end":{"column":61,"line":32},"start":{"column":4,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"29","location":{"end":{"column":18,"line":38},"start":{"column":7,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"30","location":{"end":{"column":18,"line":38},"start":{"column":7,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"31","location":{"end":{"column":16,"line":38},"start":{"column":13,"line":38}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"33","location":{"end":{"column":34,"line":40},"start":{"column":33,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"34","location":{"end":{"column":3,"line":63},"start":{"column":4,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"32","location":{"end":{"column":39,"line":40},"start":{"column":38,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"36","location":{"end":{"column":33,"line":50},"start":{"column":7,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"35","location":{"end":{"column":33,"line":50},"start":{"column":7,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"37","location":{"end":{"column":19,"line":50},"start":{"column":16,"line":50}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"38","location":{"end":{"column":4,"line":57},"start":{"column":35,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":5,"line":56},"start":{"column":11,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"39","location":{"end":{"column":53,"line":51},"start":{"column":52,"line":51}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"42","location":{"end":{"column":4,"line":62},"start":{"column":10,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"43","location":{"end":{"column":3,"line":68},"start":{"column":78,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"41","location":{"end":{"column":71,"line":53},"start":{"column":70,"line":53}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"44","location":{"end":{"column":33,"line":66},"start":{"column":32,"line":66}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"46","location":{"end":{"column":3,"line":75},"start":{"column":79,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"45","location":{"end":{"column":27,"line":67},"start":{"column":26,"line":67}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"47","location":{"end":{"column":25,"line":71},"start":{"column":7,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"48","location":{"end":{"column":25,"line":71},"start":{"column":7,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"22","location":{"end":{"column":89,"line":29},"start":{"column":75,"line":29}},"mutatorName":"UpdateOperator","replacement":"linesToBuild++","status":"Timeout"},{"id":"50","location":{"end":{"column":5,"line":74},"start":{"column":4,"line":74}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"49","location":{"end":{"column":23,"line":71},"start":{"column":20,"line":71}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"53","location":{"end":{"column":3,"line":82},"start":{"column":110,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"52","location":{"end":{"column":64,"line":74},"start":{"column":63,"line":74}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"54","location":{"end":{"column":92,"line":80},"start":{"column":91,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"55","location":{"end":{"column":110,"line":80},"start":{"column":109,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"56","location":{"end":{"column":66,"line":81},"start":{"column":65,"line":81}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"58","location":{"end":{"column":3,"line":86},"start":{"column":62,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"51","location":{"end":{"column":51,"line":73},"start":{"column":50,"line":73}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"60","location":{"end":{"column":3,"line":92},"start":{"column":91,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"59","location":{"end":{"column":29,"line":85},"start":{"column":28,"line":85}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"62","location":{"end":{"column":39,"line":89},"start":{"column":7,"line":89}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"61","location":{"end":{"column":39,"line":89},"start":{"column":7,"line":89}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"57","location":{"end":{"column":35,"line":81},"start":{"column":34,"line":81}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"63","location":{"end":{"column":37,"line":89},"start":{"column":34,"line":89}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"64","location":{"end":{"column":20,"line":89},"start":{"column":19,"line":89}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"67","location":{"end":{"column":3,"line":96},"start":{"column":54,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"65","location":{"end":{"column":52,"line":91},"start":{"column":51,"line":91}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"66","location":{"end":{"column":102,"line":91},"start":{"column":101,"line":91}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"70","location":{"end":{"column":3,"line":102},"start":{"column":79,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"69","location":{"end":{"column":34,"line":95},"start":{"column":33,"line":95}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"68","location":{"end":{"column":39,"line":95},"start":{"column":38,"line":95}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"71","location":{"end":{"column":19,"line":99},"start":{"column":7,"line":99}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"72","location":{"end":{"column":19,"line":99},"start":{"column":7,"line":99}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"73","location":{"end":{"column":16,"line":99},"start":{"column":13,"line":99}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"76","location":{"end":{"column":3,"line":106},"start":{"column":40,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"74","location":{"end":{"column":38,"line":101},"start":{"column":37,"line":101}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"75","location":{"end":{"column":85,"line":101},"start":{"column":84,"line":101}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"77","location":{"end":{"column":33,"line":105},"start":{"column":32,"line":105}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"78","location":{"end":{"column":3,"line":129},"start":{"column":70,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"79","location":{"end":{"column":59,"line":113},"start":{"column":47,"line":113}},"mutatorName":"UpdateOperator","replacement":"lineNumber--","status":"Killed"},{"id":"80","location":{"end":{"column":93,"line":113},"start":{"column":74,"line":113}},"mutatorName":"UpdateOperator","replacement":"lineHeightInFloor++","status":"Killed"},{"id":"81","location":{"end":{"column":60,"line":114},"start":{"column":3,"line":114}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"82","location":{"end":{"column":60,"line":114},"start":{"column":3,"line":114}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"83","location":{"end":{"column":55,"line":115},"start":{"column":43,"line":115}},"mutatorName":"UpdateOperator","replacement":"lineNumber--","status":"Killed"},{"id":"84","location":{"end":{"column":89,"line":115},"start":{"column":70,"line":115}},"mutatorName":"UpdateOperator","replacement":"lineHeightInFloor++","status":"Killed"},{"id":"85","location":{"end":{"column":60,"line":116},"start":{"column":3,"line":116}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"86","location":{"end":{"column":60,"line":116},"start":{"column":3,"line":116}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"87","location":{"end":{"column":27,"line":118},"start":{"column":10,"line":118}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"89","location":{"end":{"column":101,"line":119},"start":{"column":8,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"90","location":{"end":{"column":101,"line":119},"start":{"column":8,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"92","location":{"end":{"column":22,"line":119},"start":{"column":20,"line":119}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"91","location":{"end":{"column":27,"line":119},"start":{"column":25,"line":119}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"93","location":{"end":{"column":22,"line":119},"start":{"column":20,"line":119}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"94","location":{"end":{"column":49,"line":119},"start":{"column":46,"line":119}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"96","location":{"end":{"column":93,"line":119},"start":{"column":92,"line":119}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"95","location":{"end":{"column":98,"line":119},"start":{"column":97,"line":119}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"98","location":{"end":{"column":57,"line":120},"start":{"column":45,"line":120}},"mutatorName":"UpdateOperator","replacement":"lineNumber--","status":"Killed"},{"id":"88","location":{"end":{"column":4,"line":127},"start":{"column":29,"line":118}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"100","location":{"end":{"column":51,"line":121},"start":{"column":5,"line":121}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":51,"line":121},"start":{"column":5,"line":121}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"97","location":{"end":{"column":5,"line":122},"start":{"column":103,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"99","location":{"end":{"column":91,"line":120},"start":{"column":72,"line":120}},"mutatorName":"UpdateOperator","replacement":"lineHeightInFloor++","status":"Timeout"},{"id":"103","location":{"end":{"column":57,"line":124},"start":{"column":45,"line":124}},"mutatorName":"UpdateOperator","replacement":"lineNumber--","status":"Killed"},{"id":"105","location":{"end":{"column":52,"line":125},"start":{"column":5,"line":125}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"106","location":{"end":{"column":52,"line":125},"start":{"column":5,"line":125}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"107","location":{"end":{"column":3,"line":133},"start":{"column":54,"line":131}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"108","location":{"end":{"column":3,"line":137},"start":{"column":53,"line":135}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"109","location":{"end":{"column":3,"line":148},"start":{"column":64,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"110","location":{"end":{"column":22,"line":147},"start":{"column":21,"line":147}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"111","location":{"end":{"column":64,"line":146},"start":{"column":63,"line":146}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"112","location":{"end":{"column":49,"line":145},"start":{"column":48,"line":145}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"113","location":{"end":{"column":43,"line":144},"start":{"column":42,"line":144}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"114","location":{"end":{"column":61,"line":143},"start":{"column":60,"line":143}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"115","location":{"end":{"column":64,"line":142},"start":{"column":63,"line":142}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"116","location":{"end":{"column":21,"line":141},"start":{"column":20,"line":141}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"117","location":{"end":{"column":70,"line":140},"start":{"column":69,"line":140}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"118","location":{"end":{"column":3,"line":156},"start":{"column":67,"line":150}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"119","location":{"end":{"column":28,"line":152},"start":{"column":24,"line":152}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"120","location":{"end":{"column":33,"line":153},"start":{"column":7,"line":153}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"121","location":{"end":{"column":33,"line":153},"start":{"column":7,"line":153}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"122","location":{"end":{"column":19,"line":153},"start":{"column":16,"line":153}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"123","location":{"end":{"column":62,"line":154},"start":{"column":61,"line":154}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"124","location":{"end":{"column":57,"line":154},"start":{"column":56,"line":154}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"125","location":{"end":{"column":3,"line":160},"start":{"column":51,"line":158}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"102","location":{"end":{"column":5,"line":126},"start":{"column":9,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"126","location":{"end":{"column":67,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"128","location":{"end":{"column":40,"line":159},"start":{"column":38,"line":159}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"104","location":{"end":{"column":91,"line":124},"start":{"column":72,"line":124}},"mutatorName":"UpdateOperator","replacement":"lineHeightInFloor++","status":"Timeout"},{"id":"129","location":{"end":{"column":37,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"131","location":{"end":{"column":23,"line":159},"start":{"column":20,"line":159}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"127","location":{"end":{"column":67,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"132","location":{"end":{"column":67,"line":159},"start":{"column":41,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"130","location":{"end":{"column":37,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"135","location":{"end":{"column":3,"line":169},"start":{"column":82,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"134","location":{"end":{"column":53,"line":159},"start":{"column":50,"line":159}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"133","location":{"end":{"column":67,"line":159},"start":{"column":41,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"138","location":{"end":{"column":25,"line":164},"start":{"column":22,"line":164}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"136","location":{"end":{"column":27,"line":164},"start":{"column":7,"line":164}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"139","location":{"end":{"column":13,"line":165},"start":{"column":11,"line":165}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"137","location":{"end":{"column":27,"line":164},"start":{"column":7,"line":164}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"140","location":{"end":{"column":27,"line":166},"start":{"column":7,"line":166}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"141","location":{"end":{"column":27,"line":166},"start":{"column":7,"line":166}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"144","location":{"end":{"column":67,"line":168},"start":{"column":66,"line":168}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"142","location":{"end":{"column":25,"line":166},"start":{"column":22,"line":166}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"145","location":{"end":{"column":21,"line":173},"start":{"column":12,"line":173}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"143","location":{"end":{"column":50,"line":168},"start":{"column":49,"line":168}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"146","location":{"end":{"column":15,"line":174},"start":{"column":9,"line":174}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"147","location":{"end":{"column":15,"line":175},"start":{"column":9,"line":175}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export class Sastantua {\n\tprivate NEW_LINE: string = '\\n'\n\tprivate LEFT_SLOPE: string = '/'\n\tprivate RIGHT_SLOPE: string = '\\\\'\n\tprivate BRICK: string = '*'\n\tprivate SPACE: string = ' '\n\tprivate DOOR: string = '|'\n\tprivate TOP_FLOOR_HEIGHT: number = 3\n\tprivate EMPTY_STRING = ''\n\n\tdraw(pyramidSize: number): string {\n\t\tconst regularFloors = this.generateRegularFloors(pyramidSize)\n\t\treturn regularFloors.lines + this.generateFirstFloor(pyramidSize, regularFloors.lineNumber)\n\t}\n\n\tprivate generateRegularFloors(pyramidSize: number) {\n\t\tlet lines = this.EMPTY_STRING\n\t\tlet lineNumber = 1\n\t\tfor (let floor = 1 ; floor <= pyramidSize - 1 ; floor++) {\n\t\t\tlet _ret = this.generateRegularLines(floor, pyramidSize, lineNumber--)\n\t\t\tlineNumber = _ret.lineNumber\n\t\t\tlines += _ret.lines\n\t\t}\n\t\treturn { lines, lineNumber }\n\t}\n\n\tprivate generateRegularLines(currentFloor: number, pyramidSize: number, lineNumber: number) {\n\t\tlet lines = this.EMPTY_STRING\n\t\tfor (let linesToBuild = this.getHeightOf(currentFloor) ; linesToBuild ; linesToBuild--) {\n\t\t\tlet neededElements =\n\t\t\t\tthis.getNeededElements(lineNumber++, pyramidSize, linesToBuild, currentFloor, LineType.REGULAR)\n\t\t\tlines += this.buildLine(LineType.REGULAR, neededElements)\n\t\t}\n\t\treturn { lines, lineNumber }\n\t}\n\n\tprivate getHeightOf(floor: number): number {\n\t\tif (floor === 1)\n\t\t\treturn this.TOP_FLOOR_HEIGHT\n\t\treturn this.getHeightOf(floor - 1) + 1\n\t}\n\n\tprivate getNeededElements(\n\t\tline: number,\n\t\tpyramidSize: number,\n\t\tlineHeightInFloor: number,\n\t\tcurrentFloor: number,\n\t\tlineType: LineType\n\t) {\n\t\tif (lineType === LineType.DOOR) {\n\t\t\tconst doorNeededBySide = Math.floor(pyramidSize / 2)\n\t\t\treturn {\n\t\t\t\tbricks: this.calculateNeededBricksForOneSide(line, currentFloor) - doorNeededBySide,\n\t\t\t\tspaces: this.calculateNeededOffset(lineHeightInFloor, currentFloor, pyramidSize),\n\t\t\t\tdoor: doorNeededBySide,\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tbricks: this.calculateNeededBricksForOneSide(line, currentFloor),\n\t\t\tspaces: this.calculateNeededOffset(lineHeightInFloor, currentFloor, pyramidSize),\n\t\t\tdoor: 0,\n\t\t}\n\t}\n\n\tprivate calculateNeededBricksForOneSide(line: number, currentFloor: number) {\n\t\tconst defaultTriangle = line - 1\n\t\treturn defaultTriangle + this.calculateSuperiorFloorsCumulatedOffset(currentFloor)\n\t}\n\n\tprivate calculateSuperiorFloorsCumulatedOffset(currentFloor: number): number {\n\t\tif (currentFloor === 1)\n\t\t\treturn 0\n\t\treturn this.getCurrentFloorOffset(currentFloor - 1)\n\t\t\t+ this.calculateSuperiorFloorsCumulatedOffset(currentFloor - 1)\n\t}\n\n\tprivate calculateNeededOffset(lineHeightInFloor: number, currentFloor: number, pyramidSize: number): number {\n\t\tconst triangleOffsetByDefault = this.getDefaultTriangleOffset(lineHeightInFloor)\n\t\tconst offsetForNewFloor = this.calculateInferiorFloorsOffset(currentFloor, pyramidSize)\n\t\tconst offsetForInferiorFloorsLines = this.countInferiorFloorsLinesFromFloor(pyramidSize - 1, currentFloor - 1)\n\t\treturn triangleOffsetByDefault + offsetForInferiorFloorsLines + offsetForNewFloor\n\t}\n\n\tprivate getDefaultTriangleOffset(lineHeightInFloor: number) {\n\t\treturn lineHeightInFloor - 1\n\t}\n\n\tprivate calculateInferiorFloorsOffset(currentFloor: number, pyramidSize: number): number {\n\t\tif (pyramidSize - currentFloor === 0)\n\t\t\treturn 0\n\t\treturn this.getCurrentFloorOffset(currentFloor) + this.calculateInferiorFloorsOffset(currentFloor + 1, pyramidSize)\n\t}\n\n\tprivate getCurrentFloorOffset(currentFloor: number) {\n\t\treturn Math.ceil(currentFloor / 2) + 1\n\t}\n\n\tprivate countInferiorFloorsLinesFromFloor(floor: number, to: number): number {\n\t\tif (floor === to)\n\t\t\treturn 0\n\t\treturn this.getFloorHeight(floor) + this.countInferiorFloorsLinesFromFloor(floor - 1, to)\n\t}\n\n\tprivate getFloorHeight(stage: number) {\n\t\treturn this.TOP_FLOOR_HEIGHT + stage\n\t}\n\n\tprivate generateFirstFloor(pyramidSize: number, lineNumber: number) {\n\t\tlet lines = this.EMPTY_STRING\n\t\tconst currentFloor = pyramidSize\n\t\tlet lineHeightInFloor = this.getHeightOf(currentFloor)\n\n\t\tlet neededElements = this.getNeededElements(lineNumber++, pyramidSize, lineHeightInFloor--, currentFloor, LineType.REGULAR)\n\t\tlines += this.buildLine(LineType.REGULAR, neededElements)\n\t\tneededElements = this.getNeededElements(lineNumber++, pyramidSize, lineHeightInFloor--, currentFloor, LineType.REGULAR)\n\t\tlines += this.buildLine(LineType.REGULAR, neededElements)\n\n\t\twhile (lineHeightInFloor) {\n\t\t\tif (pyramidSize >= 5 && lineHeightInFloor === Math.ceil((this.getHeightOf(currentFloor) - 2) / 2) ){\n\t\t\t\tneededElements = this.getNeededElements(lineNumber++, pyramidSize, lineHeightInFloor--, currentFloor, LineType.DOOR)\n\t\t\t\tlines += this.generateLockLine(neededElements)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tneededElements = this.getNeededElements(lineNumber++, pyramidSize, lineHeightInFloor--, currentFloor, LineType.DOOR)\n\t\t\t\tlines += this.generateDoorLines(neededElements)\n\t\t\t}\n\t\t}\n\t\treturn lines\n\t}\n\n\tprivate generateDoorLines(neededElements: Elements) {\n\t\treturn this.buildLine(LineType.DOOR, neededElements)\n\t}\n\n\tprivate generateLockLine(neededElements: Elements) {\n\t\treturn this.buildLine(LineType.LOCK, neededElements)\n\t}\n\n\tprivate buildLine(lineType: string, neededElements: Elements) {\n\t\treturn this.accumulateElements(neededElements.spaces, this.SPACE) +\n\t\t\tthis.LEFT_SLOPE +\n\t\t\tthis.accumulateElements(neededElements.bricks, this.BRICK) +\n\t\t\tthis.accumulateElements(neededElements.door, this.DOOR) +\n\t\t\tthis.generateCentralElement(lineType) +\n\t\t\tthis.generateLock(neededElements, lineType) +\n\t\t\tthis.accumulateElements(neededElements.bricks, this.BRICK) +\n\t\t\tthis.RIGHT_SLOPE + this.NEW_LINE\n\t}\n\n\tprivate generateLock(neededElements: Elements, lineType: string) {\n\t\tconst potentialLock = this.accumulateElements(neededElements.door, this.DOOR)\n\t\tconst LOCK_PATTERN = '$|'\n\t\tif (lineType === LineType.LOCK)\n\t\t\treturn potentialLock.substr(0, potentialLock.length - 2) + LOCK_PATTERN\n\t\treturn potentialLock\n\t}\n\n\tprivate generateCentralElement(lineType: string) {\n\t\treturn (lineType === LineType.DOOR || lineType === LineType.LOCK) ? this.DOOR : this.BRICK\n\t}\n\n\tprivate accumulateElements(elementsNeeded: number, accumulator: string): string {\n\t\tconst baseElement = accumulator.charAt(0)\n\t\tif (elementsNeeded === 0)\n\t\t\treturn ''\n\t\tif (elementsNeeded === 1)\n\t\t\treturn accumulator\n\t\treturn this.accumulateElements(elementsNeeded - 1, accumulator + baseElement)\n\t}\n}\n\nenum LineType {\n\tREGULAR = 'regular',\n\tDOOR = 'door',\n\tLOCK = 'lock',\n}\n\ntype Elements = {\n\tbricks: number,\n\tspaces: number,\n\tdoor: number\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};